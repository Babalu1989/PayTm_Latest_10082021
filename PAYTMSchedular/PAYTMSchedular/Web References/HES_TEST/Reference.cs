//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace PAYTMSchedular.HES_TEST {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddConsumerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBillingDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::PAYTMSchedular.Properties.Settings.Default.PAYTMSchedular_HES_TEST_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddConsumerCompletedEventHandler AddConsumerCompleted;
        
        /// <remarks/>
        public event CheckConnectionCompletedEventHandler CheckConnectionCompleted;
        
        /// <remarks/>
        public event UpdateBalanceCompletedEventHandler UpdateBalanceCompleted;
        
        /// <remarks/>
        public event GetBillingDataCompletedEventHandler GetBillingDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddConsumer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddConsumer(
                    string Contract, 
                    string CA, 
                    string MeterID, 
                    string ConsumerName, 
                    string InstallationAddress, 
                    string ConsumerMobileNo, 
                    string TariffCode, 
                    string InstallationDate, 
                    string InstallationReading_kwh, 
                    string InstallationReading_kvah, 
                    string Sanctionload_kwh, 
                    string Sanctionload_kvah, 
                    string SendingOption, 
                    string Connection_disconnection, 
                    string company_code, 
                    string No_Hoardings, 
                    string Div_Code, 
                    string Portion, 
                    string Temp_Flag, 
                    string Account_Class, 
                    string PPFLAG) {
            object[] results = this.Invoke("AddConsumer", new object[] {
                        Contract,
                        CA,
                        MeterID,
                        ConsumerName,
                        InstallationAddress,
                        ConsumerMobileNo,
                        TariffCode,
                        InstallationDate,
                        InstallationReading_kwh,
                        InstallationReading_kvah,
                        Sanctionload_kwh,
                        Sanctionload_kvah,
                        SendingOption,
                        Connection_disconnection,
                        company_code,
                        No_Hoardings,
                        Div_Code,
                        Portion,
                        Temp_Flag,
                        Account_Class,
                        PPFLAG});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddConsumerAsync(
                    string Contract, 
                    string CA, 
                    string MeterID, 
                    string ConsumerName, 
                    string InstallationAddress, 
                    string ConsumerMobileNo, 
                    string TariffCode, 
                    string InstallationDate, 
                    string InstallationReading_kwh, 
                    string InstallationReading_kvah, 
                    string Sanctionload_kwh, 
                    string Sanctionload_kvah, 
                    string SendingOption, 
                    string Connection_disconnection, 
                    string company_code, 
                    string No_Hoardings, 
                    string Div_Code, 
                    string Portion, 
                    string Temp_Flag, 
                    string Account_Class, 
                    string PPFLAG) {
            this.AddConsumerAsync(Contract, CA, MeterID, ConsumerName, InstallationAddress, ConsumerMobileNo, TariffCode, InstallationDate, InstallationReading_kwh, InstallationReading_kvah, Sanctionload_kwh, Sanctionload_kvah, SendingOption, Connection_disconnection, company_code, No_Hoardings, Div_Code, Portion, Temp_Flag, Account_Class, PPFLAG, null);
        }
        
        /// <remarks/>
        public void AddConsumerAsync(
                    string Contract, 
                    string CA, 
                    string MeterID, 
                    string ConsumerName, 
                    string InstallationAddress, 
                    string ConsumerMobileNo, 
                    string TariffCode, 
                    string InstallationDate, 
                    string InstallationReading_kwh, 
                    string InstallationReading_kvah, 
                    string Sanctionload_kwh, 
                    string Sanctionload_kvah, 
                    string SendingOption, 
                    string Connection_disconnection, 
                    string company_code, 
                    string No_Hoardings, 
                    string Div_Code, 
                    string Portion, 
                    string Temp_Flag, 
                    string Account_Class, 
                    string PPFLAG, 
                    object userState) {
            if ((this.AddConsumerOperationCompleted == null)) {
                this.AddConsumerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddConsumerOperationCompleted);
            }
            this.InvokeAsync("AddConsumer", new object[] {
                        Contract,
                        CA,
                        MeterID,
                        ConsumerName,
                        InstallationAddress,
                        ConsumerMobileNo,
                        TariffCode,
                        InstallationDate,
                        InstallationReading_kwh,
                        InstallationReading_kvah,
                        Sanctionload_kwh,
                        Sanctionload_kvah,
                        SendingOption,
                        Connection_disconnection,
                        company_code,
                        No_Hoardings,
                        Div_Code,
                        Portion,
                        Temp_Flag,
                        Account_Class,
                        PPFLAG}, this.AddConsumerOperationCompleted, userState);
        }
        
        private void OnAddConsumerOperationCompleted(object arg) {
            if ((this.AddConsumerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddConsumerCompleted(this, new AddConsumerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckConnection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckConnection() {
            object[] results = this.Invoke("CheckConnection", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckConnectionAsync() {
            this.CheckConnectionAsync(null);
        }
        
        /// <remarks/>
        public void CheckConnectionAsync(object userState) {
            if ((this.CheckConnectionOperationCompleted == null)) {
                this.CheckConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckConnectionOperationCompleted);
            }
            this.InvokeAsync("CheckConnection", new object[0], this.CheckConnectionOperationCompleted, userState);
        }
        
        private void OnCheckConnectionOperationCompleted(object arg) {
            if ((this.CheckConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckConnectionCompleted(this, new CheckConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBalance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateBalance(string TransID, string NetBalance, string ArgRechargeType_Flag, string Payment_Method, string Terminal_id, string Trans_Date, string Agent_No, string CA, string Duplicate_Flag) {
            object[] results = this.Invoke("UpdateBalance", new object[] {
                        TransID,
                        NetBalance,
                        ArgRechargeType_Flag,
                        Payment_Method,
                        Terminal_id,
                        Trans_Date,
                        Agent_No,
                        CA,
                        Duplicate_Flag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBalanceAsync(string TransID, string NetBalance, string ArgRechargeType_Flag, string Payment_Method, string Terminal_id, string Trans_Date, string Agent_No, string CA, string Duplicate_Flag) {
            this.UpdateBalanceAsync(TransID, NetBalance, ArgRechargeType_Flag, Payment_Method, Terminal_id, Trans_Date, Agent_No, CA, Duplicate_Flag, null);
        }
        
        /// <remarks/>
        public void UpdateBalanceAsync(string TransID, string NetBalance, string ArgRechargeType_Flag, string Payment_Method, string Terminal_id, string Trans_Date, string Agent_No, string CA, string Duplicate_Flag, object userState) {
            if ((this.UpdateBalanceOperationCompleted == null)) {
                this.UpdateBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBalanceOperationCompleted);
            }
            this.InvokeAsync("UpdateBalance", new object[] {
                        TransID,
                        NetBalance,
                        ArgRechargeType_Flag,
                        Payment_Method,
                        Terminal_id,
                        Trans_Date,
                        Agent_No,
                        CA,
                        Duplicate_Flag}, this.UpdateBalanceOperationCompleted, userState);
        }
        
        private void OnUpdateBalanceOperationCompleted(object arg) {
            if ((this.UpdateBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBalanceCompleted(this, new UpdateBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBillingData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBillingData(string ConsumerID, string MeterID) {
            object[] results = this.Invoke("GetBillingData", new object[] {
                        ConsumerID,
                        MeterID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBillingDataAsync(string ConsumerID, string MeterID) {
            this.GetBillingDataAsync(ConsumerID, MeterID, null);
        }
        
        /// <remarks/>
        public void GetBillingDataAsync(string ConsumerID, string MeterID, object userState) {
            if ((this.GetBillingDataOperationCompleted == null)) {
                this.GetBillingDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBillingDataOperationCompleted);
            }
            this.InvokeAsync("GetBillingData", new object[] {
                        ConsumerID,
                        MeterID}, this.GetBillingDataOperationCompleted, userState);
        }
        
        private void OnGetBillingDataOperationCompleted(object arg) {
            if ((this.GetBillingDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBillingDataCompleted(this, new GetBillingDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AddConsumerCompletedEventHandler(object sender, AddConsumerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddConsumerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddConsumerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckConnectionCompletedEventHandler(object sender, CheckConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateBalanceCompletedEventHandler(object sender, UpdateBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetBillingDataCompletedEventHandler(object sender, GetBillingDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBillingDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBillingDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591